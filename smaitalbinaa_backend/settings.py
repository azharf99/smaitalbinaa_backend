"""
Django settings for Platform project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
import sys
from dotenv import load_dotenv
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False    # Set to True to enable debug mode
MAINTENANCE_MODE = False  # Set to True to enable maintenance mode
PIKET_MODE_ON = True  # Set to True to enable maintenance mode

if not DEBUG:
    ALLOWED_HOSTS = ['azharfa.pythonanywhere.com', 'smaitalbinaa.pythonanywhere.com', 'smait.albinaa.sch.id']
else:
    ALLOWED_HOSTS = ['*']


ID_DEVICE = os.getenv('ID_DEVICE')
API_KEY = os.getenv('API_KEY')
TOKEN = os.getenv('TOKEN')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.flatpages',
    "django.contrib.syndication",
    'academic_calendar',
    'achievements',
    'alumni',
    'class_reports',
    'classes',
    'courses',
    'ckeditor',
    'ckeditor_uploader',
    'dashboard',
    'extracurricular_reports',
    'extracurricular_scores',
    'extracurriculars',
    'news',
    'notifications',
    'olympiads',
    'private',
    'raker',
    'schedules',
    'student_projects',
    'students',
    'taggit',
    'tahfidz',
    'userlog',
    'teachers',
    'easy_thumbnails',
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    'social_django',
    'django_filters',
    'blog_test',
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'utils.maintenance_middleware.MaintenanceModeMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]


# Activate django debug toolbar
TESTING = "test" in sys.argv

if DEBUG and not TESTING:
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        "debug_toolbar",
        # 'attendance',
    ]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]


ROOT_URLCONF = 'smaitalbinaa_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'smaitalbinaa_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


if not DEBUG:
    DATABASES = {
            'default':{
                'ENGINE': 'django.db.backends.mysql',
                'NAME' : os.getenv('MYSQL_DB_NAME'),
                'USER' : os.getenv('MYSQL_DB_USER'),
                'PASSWORD' : os.getenv('MYSQL_DB_PASSWORD'),
                'HOST' : os.getenv('MYSQL_DB_HOST'),
                'PORT' : os.getenv('MYSQL_DB_PORT'),
                "OPTIONS": {
                    'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                    'charset': 'utf8mb4',
                    "autocommit": True,
                }
            }
        }
else:
    DATABASES = {
            'default':{
                'ENGINE': 'django.db.backends.mysql',
                'NAME' : os.getenv('LOCAL_MYSQL_DB_NAME'),
                'USER' : os.getenv('LOCAL_MYSQL_DB_USER'),
                'PASSWORD' : os.getenv('LOCAL_MYSQL_DB_PASSWORD'),
                'HOST' : os.getenv('LOCAL_MYSQL_DB_HOST'),
                'PORT' : os.getenv('LOCAL_MYSQL_DB_PORT'),
                "OPTIONS": {
                    'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                    'charset': 'utf8mb4',
                    "autocommit": True,
                }

            }
        }
    
    

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-US'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    BASE_DIR / 'static',

]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Untuk upload gambar

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

if DEBUG:
    # Django debug toolbar
    INTERNAL_IPS = [
        # ...
        "127.0.0.1",
        # ...
    ]

SITE_ID = 1


# CKEditor Config
CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
    },
}


# EMAIL FOR SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_FILE_PATH = BASE_DIR / "tmp/app-messages"
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  
EMAIL_PORT = 587
EMAIL_USE_LOCALTIME = True
EMAIL_USE_TLS = True



THUMBNAIL_ALIASES = {
    '': {
        'avatar': {'size': (40, 40), 'crop': True},
        'small': {'size': (150, 150), 'crop': True},
        'medium': {'size': (350, 350), 'crop': True},
        'large': {'size': (750, 750), 'crop': True},
        'landscape-super-small': {'size': (240, 135), 'crop': True},
        'landscape-small': {'size': (400, 225), 'crop': True},
        'landscape': {'size': (800, 450), 'crop': True},
    },
}


from django.utils import timezone
year_now = timezone.now().year
if timezone.now().month > 6:
    SEMESTER = "Ganjil"
    TAHUN_AJARAN = f"{year_now}/{year_now+1}"
    TAHUN_AJARAN_LALU = f"{year_now-1}/{year_now}"
    TAHUN_AJARAN_STRIPPED = f"{year_now}-{year_now+1}"
    TANGGAL_TAHUN_AJARAN = timezone.make_aware(timezone.datetime(year_now, 6, 1, 1, 1, 1))
    TANGGAL_TAHUN_AJARAN_LALU = timezone.make_aware(timezone.datetime(year_now - 1, 6, 1, 1, 1, 1))
    TANGGAL_TAHUN_AJARAN_END = timezone.make_aware(timezone.datetime(year_now+1, 6, 30, 1, 1, 1))
    TAHUN_AWAL_AJARAN = f"{year_now}"
    TAHUN_AWAL_AJARAN_LALU = f"{year_now}"
else:
    SEMESTER = "Genap"
    TAHUN_AJARAN = f"{year_now-1}/{year_now}"
    TAHUN_AJARAN_LALU = f"{year_now-2}/{year_now-1}"
    TAHUN_AJARAN_STRIPPED = f"{year_now-1}-{year_now}"
    TANGGAL_TAHUN_AJARAN = timezone.make_aware(timezone.datetime(year_now-1, 6, 1, 1, 1, 1))
    TANGGAL_TAHUN_AJARAN_LALU = timezone.make_aware(timezone.datetime(year_now-2, 6, 1, 1, 1, 1))
    TANGGAL_TAHUN_AJARAN_END = timezone.make_aware(timezone.datetime(year_now, 6, 30, 1, 1, 1))
    TAHUN_AWAL_AJARAN = f"{year_now - 1}"
    TAHUN_AWAL_AJARAN_LALU = f"{year_now - 2}"



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ]
}


# --- Social Auth Settings ---
AUTHENTICATION_BACKENDS = (
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.twitter.TwitterOAuth',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/api/auth/exchange-token/'

SOCIAL_AUTH_FACEBOOK_KEY = os.getenv('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = os.getenv('SOCIAL_AUTH_FACEBOOK_SECRET')

# Define the data you want to request from Facebook
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'public_profile']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email, first_name, last_name'
}

SOCIAL_AUTH_TWITTER_KEY = os.getenv('SOCIAL_AUTH_TWITTER_KEY')
SOCIAL_AUTH_TWITTER_SECRET = os.getenv('SOCIAL_AUTH_TWITTER_SECRET')

SOCIAL_AUTH_TWITTER_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_TWITTER_OAUTH2_KEY')
SOCIAL_AUTH_TWITTER_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_TWITTER_OAUTH2_SECRET')

SOCIAL_AUTH_TWITTER_OAUTH2_PKCE_CODE_CHALLENGE_METHOD = 's256'

# This pipeline ensures user data from Facebook is saved to your User model
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:9000",
    "http://localhost:5173", # Vite default port
    "http://127.0.0.1:5173",
    "http://localhost:3000",
]

if DEBUG:
    MY_FRONTEND_HOST = "http://localhost:5173"
else:
    MY_FRONTEND_HOST = "https://smaitalbinaa-frontend.vercel.app"


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "UPDATE_LAST_LOGIN": True,
}
if not DEBUG:

    CORS_ALLOWED_ORIGINS = [
        "https://smaitalbinaa.pythonanywhere.com",
        "https://pythonanywhere.com",
        "https://smait.albinaa.sch.id",
        "https://smaitalbinaa-frontend.vercel.app"
    ]

    CORS_ALLOW_METHODS = (
        "DELETE",
        "GET",
        "OPTIONS",
        "PATCH",
        "POST",
        "PUT",
    )

    CORS_ALLOW_HEADERS = (
        "accept",
        "authorization",
        "content-type",
        "user-agent",
        "x-csrftoken",
        "x-requested-with",
    )

    CSRF_TRUSTED_ORIGINS = [
        "https://smaitalbinaa.pythonanywhere.com",
        "https://pythonanywhere.com",
        "https://smait.albinaa.sch.id",
        "http://localhost:8080",
        "http://127.0.0.1:8000",
        "http://127.0.0.1:9000",
    ]

    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

    # LOGGING = {
    #     'version': 1,
    #     'disable_existing_loggers': False,
    #     'handlers': {
    #         'file': {
    #             'level': 'DEBUG',
    #             'class': 'logging.FileHandler',
    #             'filename': os.path.join(BASE_DIR, 'logs', 'app.log'),
    #         },
    #     },
    #     'loggers': {
    #         'django': {
    #             'handlers': ['file'],
    #             'level': 'DEBUG',
    #             'propagate': True,
    #         },
    #     },
    # }